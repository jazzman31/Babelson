{"version":3,"sources":["DBController.es6"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAI,KAAK,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACrC,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;AACzC,IAAI,QAAQ,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;;IAEzB,YAAY;AAElB,aAFM,YAAY,GAEf;8BAFG,YAAY;;AAGzB,YAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KAC1B;;iBAJgB,YAAY;;eAMxB,eAAC,GAAG,EAAE,MAAM,EAAE;;;AACf,mBAAO,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,WAAW,CAAC,CAC5C,IAAI,CAAC,UAAC,IAAI,EAAI;AACX,sBAAK,UAAU,GAAG,IAAI,CAAC;AACvB,oBAAI,WAAW,GAAG,MAAM,GAAG,QAAQ,CAAC,mBAAmB,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;AACrE,uBAAO,MAAK,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,WAAW,GAAE,GAAG,CAAC,CAC/C,IAAI,CAAC,UAAC,UAAU,EAAI;AACjB,2BAAO,UAAU,CAAC;iBACrB,CAAC,CAAA;aACT,CAAC,SACI,CACF,UAAC,KAAK,EAAI;AACN,oBAAI,MAAK,UAAU,IAAI,MAAK,UAAU,CAAC,GAAG,EAAE;AACxC,2BAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;AAC5C,0BAAK,UAAU,CAAC,GAAG,EAAE,CAAC;;AAEtB,2BAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACnB,2BAAO,KAAK,CAAC;iBAChB;aACJ,CAAC,CAAC;SACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;WA1BgB,YAAY;;;qBAAZ,YAAY","file":"DBController.js","sourcesContent":["var mysql = require('promise-mysql');\nvar config = require('../config').Config;\nvar DBHelper = require('../helpers/DBHelper');\n\nexport default class DBController {\n\n    constructor() {\n        this.connection = null;\n    }\n\n    query(sql, params) {\n        return mysql.createConnection(config.mysqlConfig)\n            .then((conn)=> {\n                this.connection = conn;\n                let queryParams = params ? DBHelper.serializeToSpParams(params) : '';\n                return this.connection.query(sql + queryParams +';')\n                    .then((successRet)=> {\n                        return successRet;\n                    })\n            })\n            .catch(\n                (error)=> {\n                    if (this.connection && this.connection.end) {\n                        console.log('invoking connection cleaning');\n                        this.connection.end();\n                        //logs out the error\n                        console.log(error);\n                        return error;\n                    }\n                });\n    }\n\n    /*constructor() {\n     this.config = config.Config;\n     this.connection = mysql.createConnection(this.config.mysqlConfig);\n     }\n\n     query(sql, args) {\n     return new Promise(function(resolve, reject) {\n     this.connection.query(sql, args, (err, rows) => {\n     this.close();\n     if (err) {\n     reject(err);\n     } else {\n     resolve(rows);\n     }\n     });\n     }.bind(this));\n     }\n\n     close() {\n     return new Promise((resolve, reject) => {\n     this.connection.end(err => {\n     if (err) {\n     return reject(err)\n     } else {\n     resolve();\n     }\n     });\n     });\n     }*/\n}\n\n\n/**\n *\n * let someRows, otherRows;\n database.query( 'SELECT * FROM some_table' )\n .then( rows => {\n        someRows = rows;\n        return database.query( 'SELECT * FROM other_table' );\n    } )\n .then( rows => {\n        otherRows = rows;\n        return database.close();\n    }, err => {\n        return database.close().then( () => { throw err; } )\n    } )\n .then( () => {\n        // do something with someRows and otherRows\n    }\n .catch( err => {\n        // handle the error\n    } )\n\n */"]}