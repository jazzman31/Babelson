{"version":3,"sources":["ProductController.es6"],"names":[],"mappings":";;;;;;;;;;;;4BAAyB,gBAAgB;;;;oCACX,0BAA0B;;4CACxB,kCAAkC;;IAErD,iBAAiB;AACf,aADF,iBAAiB,GACZ;8BADL,iBAAiB;KAEzB;;iBAFQ,iBAAiB;;;;;;;;eASpB,kBAAG;AACL,mBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,+CAAkB,CAAC,KAAK,WAAS,sBAdrC,eAAe,CAcsC,wBAAwB,CAAG,CACvE,IAAI,CAAC,UAAC,MAAM,EAAI;AACb,2BAAO,CAAC,MAAM,CAAC,CAAA;iBAClB,CAAC,CACD,IAAI,CAAC,UAAC,MAAM,EAAI;AACb,0BAAM,CAAC,MAAM,CAAC,CAAA;iBACjB,CAAC,CAAC;aACV,CAAC,CAAC;SACN;;;;;;;;eAMmB,gCAAG;;AAEnB,gBAAI,YAAY,GAAG,+BAAkB,CAAC;AACtC,mBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,4BAAY,CAAC,KAAK,WAAS,sBAhC/B,eAAe,CAgCgC,sBAAsB,CAAG,CAC/D,IAAI,CAAC,UAAC,MAAM,EAAI;AACb,wBAAI,iBAAiB,GAAG,kCAjCpC,iBAAiB,EAiC0C,CAAC;AAChD,qCAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,2BAAO,CAAC,iBAAiB,CAAC,CAAC;iBAC9B,CAAC,SACI,CAAC,UAAC,GAAG,EAAI;AACX,0BAAM,CAAC,GAAG,CAAC,CAAA;iBACd,CAAC,CAAC;aACV,CAAC,CAAC;SACN;;;WAvCQ,iBAAiB;;;QAAjB,iBAAiB,GAAjB,iBAAiB","file":"ProductController.js","sourcesContent":["import DBController from './DBController';\nimport {StoredProcedure} from '../enums/StoredProcedure';\nimport {ProductCollection} from '../collections/ProductCollection';\n\nexport class ProductController {\n    constructor() {\n    }\n\n    /**\n     * Returns a simple SELECT * from all products\n     * no joins with types version etc in this one\n     * @returns {Promise}\n     */\n    getAll() {\n        return new Promise((resolve, reject) => {\n            new DBController().query(`call ${StoredProcedure.PRODUCT_GET_ALL_NO_JOINS}`)\n                .then((result)=> {\n                    resolve(result)\n                })\n                .fail((result)=> {\n                    reject(result)\n                });\n        });\n    }\n\n    /**\n     * Returns all parent products(no children for bundles)\n     * @returns {Promise}\n     */\n    getAllParentProducts() {\n\n        let dbController = new DBController();\n        return new Promise((resolve, reject) => {\n            dbController.query(`call ${StoredProcedure.PRODUCT_GET_ALL_PARENT}`)\n                .then((sqlRet)=> {\n                    let productCollection = new ProductCollection();\n                    productCollection.reset(sqlRet[0]);\n                    resolve(productCollection);\n                })\n                .catch((err)=> {\n                    reject(err)\n                });\n        });\n    }\n}"]}